// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// InferenceProfileSpec defines the desired state of InferenceProfile.
type InferenceProfileSpec struct {

	// A description for the inference profile.
	//
	// Regex Pattern: `^([0-9a-zA-Z:.][ _-]?)+$`
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	Description *string `json:"description,omitempty"`
	// A name for the inference profile.
	//
	// Regex Pattern: `^([0-9a-zA-Z][ _-]?)+$`
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	InferenceProfileName *string `json:"inferenceProfileName"`
	// The foundation model or system-defined inference profile that the inference
	// profile will track metrics and costs for.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	ModelSource *InferenceProfileModelSource `json:"modelSource"`
	// An array of objects, each of which contains a tag and its value. For more
	// information, see Tagging resources (https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html)
	// in the Amazon Bedrock User Guide (https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html).
	Tags []*Tag `json:"tags,omitempty"`
}

// InferenceProfileStatus defines the observed state of InferenceProfile
type InferenceProfileStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The unique identifier of the inference profile.
	//
	// Regex Pattern: `^[a-zA-Z0-9-:.]+$`
	// +kubebuilder:validation:Optional
	InferenceProfileID *string `json:"inferenceProfileID,omitempty"`
	// The status of the inference profile. ACTIVE means that the inference profile
	// is ready to be used.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// InferenceProfile is the Schema for the InferenceProfiles API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type InferenceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InferenceProfileSpec   `json:"spec,omitempty"`
	Status            InferenceProfileStatus `json:"status,omitempty"`
}

// InferenceProfileList contains a list of InferenceProfile
// +kubebuilder:object:root=true
type InferenceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InferenceProfile `json:"items"`
}

func init() {
	SchemeBuilder.Register(&InferenceProfile{}, &InferenceProfileList{})
}
